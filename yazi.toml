# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio          = [ 1, 4, 3 ]
sort_by        = "natural"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
sort_translit  = false
linemode       = "none"
show_hidden    = true
show_symlink   = true
scrolloff      = 5
# Disable the mouse support. Otherwise, it conflicts with tmux and the image preview will disappear when mouse moves.
# mouse_events   = [ "click", "scroll" ]
mouse_events   = []

[preview]
tab_size        = 2
max_width       = 1200
max_height      = 1600
cache_dir       = ""
image_filter    = "triangle"
image_quality   = 75
image_delay     = 50
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]
wrap            = "no"

[opener]
edit = [
  { run = '${EDITOR:=nvim} "$@"',      desc = "Nvim", block = true, for = "unix" },
  { run = 'neovide "$@"', orphan = true, desc = "Neovide",        for = "macos" },
  { run = 'code %*',    orphan = true, desc = "Code",           for = "windows" },
  { run = 'code -w %*', block = true,  desc = "Code (block)",   for = "windows" },
]
open = [
  { run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
  { run = 'open "$@"',                    desc = "Open", for = "macos" },
  { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]
reveal = [
  { run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
  { run = 'open -R "$1"',                         desc = "Reveal", for = "macos" },
  { run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
  { run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
  { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
  { run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" },
]
play = [
  { run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
  { run = 'mpv --force-window %*', orphan = true, for = "windows" },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]
gimp = [
  { run = 'gimp "$@"', orphan = true, desc = "GIMP", for = "macos" },
]

[open]
rules = [
  # Folder
  # { name = "*/", use = [ "edit", "open", "reveal" ] },
  { name = "*/", use = ["open", "reveal" ] },
  # Text
  { mime = "text/*", use = [ "edit", "reveal" ] },
  # Image
  { mime = "image/*", use = [ "open", "reveal", "gimp" ] },
  # Media
  { mime = "{audio,video}/*", use = [ "open", "play", "reveal" ] },
  # Archive
  { mime = "application/{,g}zip", use = [ "extract", "reveal" ] },
  { mime = "application/{tar,bzip*,7z-compressed,xz,rar}", use = [ "extract", "reveal" ] },
  # JSON
  { mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },
  { mime = "*/javascript", use = [ "edit", "reveal" ] },
  # Empty file
  { mime = "inode/empty", use = [ "edit", "reveal" ] },
  # pdf
  { mime = "application/pdf", use = [ "open", "reveal" ] },
  # Microsoft files
  { name = "*.xlsx", use = [ "open", "reveal" ] },
  { name = "*.ppt",  use = [ "open", "reveal" ] },
  { name = "*.pptx", use = [ "open", "reveal" ] },
  { name = "*.doc",  use = [ "open", "reveal" ] },
  { name = "*.docx", use = [ "open", "reveal" ] },
  # Fallback
  { name = "*", use = ["edit", "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]

fetchers = [
  # Mimetype
  { id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
preloaders = [
  # Image
  { mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" },
  { mime = "image/*", run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
  # Font
  { mime = "font/*", run = "font" },
  { mime = "application/vnd.ms-opentype", run = "font" },
]
previewers = [
  { name = "*/", run = "folder" },
  # Code
  { mime = "text/*", run = "code" },
  { mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
  # JSON
  { mime = "application/{json,ndjson}", run = "json" },
  # Image
  { mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" },
  { mime = "image/*", run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
  # Archive
  { mime = "application/{,g}zip", run = "archive" },
  { mime = "application/{tar,bzip*,7z-compressed,xz,rar,iso9660-image}", run = "archive" },
  # Font
  { mime = "font/*", run = "font" },
  { mime = "application/vnd.ms-opentype", run = "font" },
  # Fallback
  { name = "*", run = "file" },
]

# Copied from the ouch plugin: https://github.com/ndtoan96/ouch.yazi
prepend_previewers = [
  # Archive previewer
  { mime = "application/*zip",          run = "ouch" },
  { mime = "application/tar",           run = "ouch" },
  { mime = "application/bzip2",         run = "ouch" },
  { mime = "application/7z-compressed", run = "ouch" },
  { mime = "application/rar",           run = "ouch" },
  { mime = "application/xz",            run = "ouch" },
]


[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# trash
trash_title   = "Move {n} selected file{s} to trash? (y/N)"
trash_origin  = "top-center"
trash_offset  = [ 0, 2, 50, 3 ]

# delete
delete_title   = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin  = "top-center"
delete_offset  = [ 0, 2, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

# overwrite
overwrite_title  = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [ 0, 2, 50, 3 ]

# quit
quit_title  = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [ 0, 2, 50, 3 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false
sort_translit  = false

[log]
enabled = false
